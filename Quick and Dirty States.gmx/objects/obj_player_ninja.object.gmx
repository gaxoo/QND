<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_ninja_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_tracker</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
grav = .5;
hsp = 0;
hsp_carry = 0;
vsp = 0;
jumpspeed = 7;
movespeed = 4;

key_duck = 0;
key_power =0;
key_attack =0;
attacking = false;

//Initiate Camera
instance_create(x,y,obj_cont_view);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get player's Input
key_left = -keyboard_check(ord('A'));
key_right = keyboard_check(ord('D'));
key_jump = keyboard_check_pressed(ord('W'));
key_duck = keyboard_check(ord('S'));
key_attack = keyboard_check_pressed(vk_space);
key_power = keyboard_check_pressed(vk_shift);

//React to Input
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_solid))
{
    if (key_jump) vsp = -jumpspeed;
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

//Horizontal Collisions
if (place_meeting(x+hsp,y,obj_solid))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_solid))
    {
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}

x += hsp_final;

//Vertical Collisions
if (place_meeting(x,y+vsp,obj_solid))
{
    while(!place_meeting(x,y+sign(vsp),obj_solid))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp;

if attacking = false{
//Animate
if (move!=0) image_xscale = move;
if (place_meeting(x,y+1,obj_solid))
{
    if (hsp!=0) sprite_index = spr_player_ninja_run; else sprite_index = spr_player_ninja_idle;
    image_speed = .5;
}
else
{
    if (vsp &lt; 0) sprite_index = spr_player_ninja_jump; else sprite_index = spr_player_ninja_fall;
    image_speed = .2;
}
}
if (key_attack){
    attacking = true;
    sprite_index = spr_player_ninja_slash;
    image_speed = 1;
    image_index = 0;
    alarm[0] = 3;
    
        if (image_index &gt;= 0) || (image_index &lt;= 2)
        {
            with (instance_create(x,y,obj_player_ninja_hitbox))
            {
                image_xscale = other.image_xscale;
                with (instance_place(x,y,obj_enemy))
                {
                    if (hit == 0)
                    {
                        hit = 1;
                        vsp = -3;
                        hsp = sign(x - other.x) * 4;
                        image_xscale = sign(hsp);
                    }
                }
            }
        }
}

if (key_power) &amp;&amp; !place_meeting(x,y,obj_balloon)
{
    instance_change(obj_player,true);
    instance_create(x,y,obj_sword);
    exit;
}

if (key_power) &amp;&amp; place_meeting(x,y,obj_balloon)
{
    instance_change(obj_player_float,true);
    instance_create(x,y,obj_sword);
    exit;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
